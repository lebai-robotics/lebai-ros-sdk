// Generated by gencpp from file lebai_msgs/IOStatus.msg
// DO NOT EDIT!


#ifndef LEBAI_MSGS_MESSAGE_IOSTATUS_H
#define LEBAI_MSGS_MESSAGE_IOSTATUS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace lebai_msgs
{
template <class ContainerAllocator>
struct IOStatus_
{
  typedef IOStatus_<ContainerAllocator> Type;

  IOStatus_()
    : robot_din()
    , robot_dout()
    , robot_ain()
    , robot_aout()
    , robot_ain_type()
    , robot_aout_type()
    , flange_din()
    , flange_dout()  {
    }
  IOStatus_(const ContainerAllocator& _alloc)
    : robot_din(_alloc)
    , robot_dout(_alloc)
    , robot_ain(_alloc)
    , robot_aout(_alloc)
    , robot_ain_type(_alloc)
    , robot_aout_type(_alloc)
    , flange_din(_alloc)
    , flange_dout(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _robot_din_type;
  _robot_din_type robot_din;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _robot_dout_type;
  _robot_dout_type robot_dout;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _robot_ain_type;
  _robot_ain_type robot_ain;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _robot_aout_type;
  _robot_aout_type robot_aout;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _robot_ain_type_type;
  _robot_ain_type_type robot_ain_type;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _robot_aout_type_type;
  _robot_aout_type_type robot_aout_type;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _flange_din_type;
  _flange_din_type flange_din;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _flange_dout_type;
  _flange_dout_type flange_dout;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(VOLTAGETYPE)
  #undef VOLTAGETYPE
#endif
#if defined(_WIN32) && defined(CURRENTTYPE)
  #undef CURRENTTYPE
#endif

  enum {
    VOLTAGETYPE = 0u,
    CURRENTTYPE = 1u,
  };


  typedef boost::shared_ptr< ::lebai_msgs::IOStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lebai_msgs::IOStatus_<ContainerAllocator> const> ConstPtr;

}; // struct IOStatus_

typedef ::lebai_msgs::IOStatus_<std::allocator<void> > IOStatus;

typedef boost::shared_ptr< ::lebai_msgs::IOStatus > IOStatusPtr;
typedef boost::shared_ptr< ::lebai_msgs::IOStatus const> IOStatusConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lebai_msgs::IOStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lebai_msgs::IOStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lebai_msgs::IOStatus_<ContainerAllocator1> & lhs, const ::lebai_msgs::IOStatus_<ContainerAllocator2> & rhs)
{
  return lhs.robot_din == rhs.robot_din &&
    lhs.robot_dout == rhs.robot_dout &&
    lhs.robot_ain == rhs.robot_ain &&
    lhs.robot_aout == rhs.robot_aout &&
    lhs.robot_ain_type == rhs.robot_ain_type &&
    lhs.robot_aout_type == rhs.robot_aout_type &&
    lhs.flange_din == rhs.flange_din &&
    lhs.flange_dout == rhs.flange_dout;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lebai_msgs::IOStatus_<ContainerAllocator1> & lhs, const ::lebai_msgs::IOStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lebai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lebai_msgs::IOStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lebai_msgs::IOStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lebai_msgs::IOStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lebai_msgs::IOStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lebai_msgs::IOStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lebai_msgs::IOStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lebai_msgs::IOStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "50c134754be339b506d0926e86b51aa1";
  }

  static const char* value(const ::lebai_msgs::IOStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x50c134754be339b5ULL;
  static const uint64_t static_value2 = 0x06d0926e86b51aa1ULL;
};

template<class ContainerAllocator>
struct DataType< ::lebai_msgs::IOStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lebai_msgs/IOStatus";
  }

  static const char* value(const ::lebai_msgs::IOStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lebai_msgs::IOStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool[] robot_din\n"
"bool[] robot_dout\n"
"float32[] robot_ain\n"
"float32[] robot_aout\n"
"uint8[] robot_ain_type\n"
"uint8[] robot_aout_type\n"
"bool[] flange_din\n"
"bool[] flange_dout\n"
"\n"
"uint8 VOLTAGETYPE=0\n"
"uint8 CURRENTTYPE=1\n"
;
  }

  static const char* value(const ::lebai_msgs::IOStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lebai_msgs::IOStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.robot_din);
      stream.next(m.robot_dout);
      stream.next(m.robot_ain);
      stream.next(m.robot_aout);
      stream.next(m.robot_ain_type);
      stream.next(m.robot_aout_type);
      stream.next(m.flange_din);
      stream.next(m.flange_dout);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct IOStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lebai_msgs::IOStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lebai_msgs::IOStatus_<ContainerAllocator>& v)
  {
    s << indent << "robot_din[]" << std::endl;
    for (size_t i = 0; i < v.robot_din.size(); ++i)
    {
      s << indent << "  robot_din[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.robot_din[i]);
    }
    s << indent << "robot_dout[]" << std::endl;
    for (size_t i = 0; i < v.robot_dout.size(); ++i)
    {
      s << indent << "  robot_dout[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.robot_dout[i]);
    }
    s << indent << "robot_ain[]" << std::endl;
    for (size_t i = 0; i < v.robot_ain.size(); ++i)
    {
      s << indent << "  robot_ain[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.robot_ain[i]);
    }
    s << indent << "robot_aout[]" << std::endl;
    for (size_t i = 0; i < v.robot_aout.size(); ++i)
    {
      s << indent << "  robot_aout[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.robot_aout[i]);
    }
    s << indent << "robot_ain_type[]" << std::endl;
    for (size_t i = 0; i < v.robot_ain_type.size(); ++i)
    {
      s << indent << "  robot_ain_type[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.robot_ain_type[i]);
    }
    s << indent << "robot_aout_type[]" << std::endl;
    for (size_t i = 0; i < v.robot_aout_type.size(); ++i)
    {
      s << indent << "  robot_aout_type[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.robot_aout_type[i]);
    }
    s << indent << "flange_din[]" << std::endl;
    for (size_t i = 0; i < v.flange_din.size(); ++i)
    {
      s << indent << "  flange_din[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.flange_din[i]);
    }
    s << indent << "flange_dout[]" << std::endl;
    for (size_t i = 0; i < v.flange_dout.size(); ++i)
    {
      s << indent << "  flange_dout[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.flange_dout[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEBAI_MSGS_MESSAGE_IOSTATUS_H
