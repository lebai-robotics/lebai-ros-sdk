// Generated by gencpp from file lebai_msgs/UntilInfo.msg
// DO NOT EDIT!


#ifndef LEBAI_MSGS_MESSAGE_UNTILINFO_H
#define LEBAI_MSGS_MESSAGE_UNTILINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <lebai_msgs/IOConditionalExpress.h>

namespace lebai_msgs
{
template <class ContainerAllocator>
struct UntilInfo_
{
  typedef UntilInfo_<ContainerAllocator> Type;

  UntilInfo_()
    : io_express_logic(0)
    , io_express()  {
    }
  UntilInfo_(const ContainerAllocator& _alloc)
    : io_express_logic(0)
    , io_express(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _io_express_logic_type;
  _io_express_logic_type io_express_logic;

   typedef std::vector< ::lebai_msgs::IOConditionalExpress_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::lebai_msgs::IOConditionalExpress_<ContainerAllocator> >::other >  _io_express_type;
  _io_express_type io_express;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(LOGIC_AND)
  #undef LOGIC_AND
#endif
#if defined(_WIN32) && defined(LOGIC_OR)
  #undef LOGIC_OR
#endif

  enum {
    LOGIC_AND = 0u,
    LOGIC_OR = 1u,
  };


  typedef boost::shared_ptr< ::lebai_msgs::UntilInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lebai_msgs::UntilInfo_<ContainerAllocator> const> ConstPtr;

}; // struct UntilInfo_

typedef ::lebai_msgs::UntilInfo_<std::allocator<void> > UntilInfo;

typedef boost::shared_ptr< ::lebai_msgs::UntilInfo > UntilInfoPtr;
typedef boost::shared_ptr< ::lebai_msgs::UntilInfo const> UntilInfoConstPtr;

// constants requiring out of line definition

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lebai_msgs::UntilInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lebai_msgs::UntilInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lebai_msgs::UntilInfo_<ContainerAllocator1> & lhs, const ::lebai_msgs::UntilInfo_<ContainerAllocator2> & rhs)
{
  return lhs.io_express_logic == rhs.io_express_logic &&
    lhs.io_express == rhs.io_express;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lebai_msgs::UntilInfo_<ContainerAllocator1> & lhs, const ::lebai_msgs::UntilInfo_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lebai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lebai_msgs::UntilInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lebai_msgs::UntilInfo_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lebai_msgs::UntilInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lebai_msgs::UntilInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lebai_msgs::UntilInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lebai_msgs::UntilInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lebai_msgs::UntilInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0907ad90f772aaa5fd1b8f10a92d018a";
  }

  static const char* value(const ::lebai_msgs::UntilInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0907ad90f772aaa5ULL;
  static const uint64_t static_value2 = 0xfd1b8f10a92d018aULL;
};

template<class ContainerAllocator>
struct DataType< ::lebai_msgs::UntilInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lebai_msgs/UntilInfo";
  }

  static const char* value(const ::lebai_msgs::UntilInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lebai_msgs::UntilInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 io_express_logic\n"
"lebai_msgs/IOConditionalExpress[] io_express\n"
"\n"
"uint8 LOGIC_AND=0\n"
"uint8 LOGIC_OR=1\n"
"\n"
"\n"
"================================================================================\n"
"MSG: lebai_msgs/IOConditionalExpress\n"
"uint32 group\n"
"uint32 pin\n"
"uint32 type\n"
"float64 float_value\n"
"uint8 uint_value\n"
"uint8 logic_operation\n"
"\n"
"uint8 GROUP_ROBOT=0\n"
"uint8 GROUP_FLANGE=1\n"
"\n"
"uint8 TYPE_ANALOG=0\n"
"uint8 TYPE_DIGITAL=1\n"
"\n"
"# great >\n"
"uint8 LOGIC_OP_GT=0\n"
"# great and equal >=\n"
"uint8 LOGIC_OP_GE=1\n"
"# equal\n"
"uint8 LOGIC_OP_EQ=2\n"
"# not equal\n"
"uint8 LOGIC_OP_NE=3\n"
"# less than\n"
"uint8 LOGIC_OP_LT=4\n"
"# less than and equal\n"
"uint8 LOGIC_OP_LE=5\n"
"\n"
"\n"
"\n"
;
  }

  static const char* value(const ::lebai_msgs::UntilInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lebai_msgs::UntilInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.io_express_logic);
      stream.next(m.io_express);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UntilInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lebai_msgs::UntilInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lebai_msgs::UntilInfo_<ContainerAllocator>& v)
  {
    s << indent << "io_express_logic: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.io_express_logic);
    s << indent << "io_express[]" << std::endl;
    for (size_t i = 0; i < v.io_express.size(); ++i)
    {
      s << indent << "  io_express[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::lebai_msgs::IOConditionalExpress_<ContainerAllocator> >::stream(s, indent + "    ", v.io_express[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEBAI_MSGS_MESSAGE_UNTILINFO_H
