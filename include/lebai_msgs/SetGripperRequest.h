// Generated by gencpp from file lebai_msgs/SetGripperRequest.msg
// DO NOT EDIT!


#ifndef LEBAI_MSGS_MESSAGE_SETGRIPPERREQUEST_H
#define LEBAI_MSGS_MESSAGE_SETGRIPPERREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <lebai_msgs/ExecuteMode.h>

namespace lebai_msgs
{
template <class ContainerAllocator>
struct SetGripperRequest_
{
  typedef SetGripperRequest_<ContainerAllocator> Type;

  SetGripperRequest_()
    : val(0.0)
    , execute_mode()  {
    }
  SetGripperRequest_(const ContainerAllocator& _alloc)
    : val(0.0)
    , execute_mode(_alloc)  {
  (void)_alloc;
    }



   typedef double _val_type;
  _val_type val;

   typedef  ::lebai_msgs::ExecuteMode_<ContainerAllocator>  _execute_mode_type;
  _execute_mode_type execute_mode;





  typedef boost::shared_ptr< ::lebai_msgs::SetGripperRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lebai_msgs::SetGripperRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetGripperRequest_

typedef ::lebai_msgs::SetGripperRequest_<std::allocator<void> > SetGripperRequest;

typedef boost::shared_ptr< ::lebai_msgs::SetGripperRequest > SetGripperRequestPtr;
typedef boost::shared_ptr< ::lebai_msgs::SetGripperRequest const> SetGripperRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lebai_msgs::SetGripperRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lebai_msgs::SetGripperRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lebai_msgs::SetGripperRequest_<ContainerAllocator1> & lhs, const ::lebai_msgs::SetGripperRequest_<ContainerAllocator2> & rhs)
{
  return lhs.val == rhs.val &&
    lhs.execute_mode == rhs.execute_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lebai_msgs::SetGripperRequest_<ContainerAllocator1> & lhs, const ::lebai_msgs::SetGripperRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lebai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lebai_msgs::SetGripperRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lebai_msgs::SetGripperRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lebai_msgs::SetGripperRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lebai_msgs::SetGripperRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lebai_msgs::SetGripperRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lebai_msgs::SetGripperRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lebai_msgs::SetGripperRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "55d855bd3cc6e73201d5b102ef34651b";
  }

  static const char* value(const ::lebai_msgs::SetGripperRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x55d855bd3cc6e732ULL;
  static const uint64_t static_value2 = 0x01d5b102ef34651bULL;
};

template<class ContainerAllocator>
struct DataType< ::lebai_msgs::SetGripperRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lebai_msgs/SetGripperRequest";
  }

  static const char* value(const ::lebai_msgs::SetGripperRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lebai_msgs::SetGripperRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 val\n"
"lebai_msgs/ExecuteMode execute_mode\n"
"\n"
"================================================================================\n"
"MSG: lebai_msgs/ExecuteMode\n"
"uint8 data\n"
"uint8 EXECUTE_MODE_BUFFER=0\n"
"uint8 EXECUTE_MODE_IMMED=1\n"
;
  }

  static const char* value(const ::lebai_msgs::SetGripperRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lebai_msgs::SetGripperRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.val);
      stream.next(m.execute_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetGripperRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lebai_msgs::SetGripperRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lebai_msgs::SetGripperRequest_<ContainerAllocator>& v)
  {
    s << indent << "val: ";
    Printer<double>::stream(s, indent + "  ", v.val);
    s << indent << "execute_mode: ";
    s << std::endl;
    Printer< ::lebai_msgs::ExecuteMode_<ContainerAllocator> >::stream(s, indent + "  ", v.execute_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEBAI_MSGS_MESSAGE_SETGRIPPERREQUEST_H
