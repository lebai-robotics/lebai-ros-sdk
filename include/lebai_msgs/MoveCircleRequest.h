// Generated by gencpp from file lebai_msgs/MoveCircleRequest.msg
// DO NOT EDIT!


#ifndef LEBAI_MSGS_MESSAGE_MOVECIRCLEREQUEST_H
#define LEBAI_MSGS_MESSAGE_MOVECIRCLEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Pose.h>
#include <lebai_msgs/MoveCommon.h>
#include <lebai_msgs/ExecuteMode.h>

namespace lebai_msgs
{
template <class ContainerAllocator>
struct MoveCircleRequest_
{
  typedef MoveCircleRequest_<ContainerAllocator> Type;

  MoveCircleRequest_()
    : way_point_is_joint_pose(false)
    , way_point_joint_pose()
    , way_point_cartesian_pose()
    , end_point_is_joint_pose(false)
    , end_point_joint_pose()
    , end_point_cartesian_pose()
    , circle_angle(0.0)
    , common()
    , execute_mode()  {
    }
  MoveCircleRequest_(const ContainerAllocator& _alloc)
    : way_point_is_joint_pose(false)
    , way_point_joint_pose(_alloc)
    , way_point_cartesian_pose(_alloc)
    , end_point_is_joint_pose(false)
    , end_point_joint_pose(_alloc)
    , end_point_cartesian_pose(_alloc)
    , circle_angle(0.0)
    , common(_alloc)
    , execute_mode(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _way_point_is_joint_pose_type;
  _way_point_is_joint_pose_type way_point_is_joint_pose;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _way_point_joint_pose_type;
  _way_point_joint_pose_type way_point_joint_pose;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _way_point_cartesian_pose_type;
  _way_point_cartesian_pose_type way_point_cartesian_pose;

   typedef uint8_t _end_point_is_joint_pose_type;
  _end_point_is_joint_pose_type end_point_is_joint_pose;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _end_point_joint_pose_type;
  _end_point_joint_pose_type end_point_joint_pose;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _end_point_cartesian_pose_type;
  _end_point_cartesian_pose_type end_point_cartesian_pose;

   typedef double _circle_angle_type;
  _circle_angle_type circle_angle;

   typedef  ::lebai_msgs::MoveCommon_<ContainerAllocator>  _common_type;
  _common_type common;

   typedef  ::lebai_msgs::ExecuteMode_<ContainerAllocator>  _execute_mode_type;
  _execute_mode_type execute_mode;





  typedef boost::shared_ptr< ::lebai_msgs::MoveCircleRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::lebai_msgs::MoveCircleRequest_<ContainerAllocator> const> ConstPtr;

}; // struct MoveCircleRequest_

typedef ::lebai_msgs::MoveCircleRequest_<std::allocator<void> > MoveCircleRequest;

typedef boost::shared_ptr< ::lebai_msgs::MoveCircleRequest > MoveCircleRequestPtr;
typedef boost::shared_ptr< ::lebai_msgs::MoveCircleRequest const> MoveCircleRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::lebai_msgs::MoveCircleRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::lebai_msgs::MoveCircleRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::lebai_msgs::MoveCircleRequest_<ContainerAllocator1> & lhs, const ::lebai_msgs::MoveCircleRequest_<ContainerAllocator2> & rhs)
{
  return lhs.way_point_is_joint_pose == rhs.way_point_is_joint_pose &&
    lhs.way_point_joint_pose == rhs.way_point_joint_pose &&
    lhs.way_point_cartesian_pose == rhs.way_point_cartesian_pose &&
    lhs.end_point_is_joint_pose == rhs.end_point_is_joint_pose &&
    lhs.end_point_joint_pose == rhs.end_point_joint_pose &&
    lhs.end_point_cartesian_pose == rhs.end_point_cartesian_pose &&
    lhs.circle_angle == rhs.circle_angle &&
    lhs.common == rhs.common &&
    lhs.execute_mode == rhs.execute_mode;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::lebai_msgs::MoveCircleRequest_<ContainerAllocator1> & lhs, const ::lebai_msgs::MoveCircleRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace lebai_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::lebai_msgs::MoveCircleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::lebai_msgs::MoveCircleRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lebai_msgs::MoveCircleRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::lebai_msgs::MoveCircleRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lebai_msgs::MoveCircleRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::lebai_msgs::MoveCircleRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::lebai_msgs::MoveCircleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "26e0f80d402217d95277f55cf77dc8cb";
  }

  static const char* value(const ::lebai_msgs::MoveCircleRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x26e0f80d402217d9ULL;
  static const uint64_t static_value2 = 0x5277f55cf77dc8cbULL;
};

template<class ContainerAllocator>
struct DataType< ::lebai_msgs::MoveCircleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "lebai_msgs/MoveCircleRequest";
  }

  static const char* value(const ::lebai_msgs::MoveCircleRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::lebai_msgs::MoveCircleRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool way_point_is_joint_pose\n"
"float64[] way_point_joint_pose\n"
"geometry_msgs/Pose way_point_cartesian_pose\n"
"bool end_point_is_joint_pose\n"
"float64[] end_point_joint_pose\n"
"geometry_msgs/Pose end_point_cartesian_pose\n"
"float64 circle_angle\n"
"lebai_msgs/MoveCommon common\n"
"lebai_msgs/ExecuteMode execute_mode\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: lebai_msgs/MoveCommon\n"
"float64 vel\n"
"float64 acc\n"
"float64 time\n"
"bool is_continous_mode\n"
"# 0: normal move, 1: smooth move\n"
"uint8 continuation_type\n"
"# until data\n"
"bool until\n"
"lebai_msgs/UntilInfo until_info\n"
"================================================================================\n"
"MSG: lebai_msgs/UntilInfo\n"
"uint8 io_express_logic\n"
"lebai_msgs/IOConditionalExpress[] io_express\n"
"\n"
"uint8 LOGIC_AND=0\n"
"uint8 LOGIC_OR=1\n"
"\n"
"\n"
"================================================================================\n"
"MSG: lebai_msgs/IOConditionalExpress\n"
"uint32 group\n"
"uint32 pin\n"
"uint32 type\n"
"float64 float_value\n"
"uint8 uint_value\n"
"uint8 logic_operation\n"
"\n"
"uint8 GROUP_ROBOT=0\n"
"uint8 GROUP_FLANGE=1\n"
"\n"
"uint8 TYPE_ANALOG=0\n"
"uint8 TYPE_DIGITAL=1\n"
"\n"
"# great >\n"
"uint8 LOGIC_OP_GT=0\n"
"# great and equal >=\n"
"uint8 LOGIC_OP_GE=1\n"
"# equal\n"
"uint8 LOGIC_OP_EQ=2\n"
"# not equal\n"
"uint8 LOGIC_OP_NE=3\n"
"# less than\n"
"uint8 LOGIC_OP_LT=4\n"
"# less than and equal\n"
"uint8 LOGIC_OP_LE=5\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: lebai_msgs/ExecuteMode\n"
"uint8 data\n"
"uint8 EXECUTE_MODE_BUFFER=0\n"
"uint8 EXECUTE_MODE_IMMED=1\n"
;
  }

  static const char* value(const ::lebai_msgs::MoveCircleRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::lebai_msgs::MoveCircleRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.way_point_is_joint_pose);
      stream.next(m.way_point_joint_pose);
      stream.next(m.way_point_cartesian_pose);
      stream.next(m.end_point_is_joint_pose);
      stream.next(m.end_point_joint_pose);
      stream.next(m.end_point_cartesian_pose);
      stream.next(m.circle_angle);
      stream.next(m.common);
      stream.next(m.execute_mode);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MoveCircleRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::lebai_msgs::MoveCircleRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::lebai_msgs::MoveCircleRequest_<ContainerAllocator>& v)
  {
    s << indent << "way_point_is_joint_pose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.way_point_is_joint_pose);
    s << indent << "way_point_joint_pose[]" << std::endl;
    for (size_t i = 0; i < v.way_point_joint_pose.size(); ++i)
    {
      s << indent << "  way_point_joint_pose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.way_point_joint_pose[i]);
    }
    s << indent << "way_point_cartesian_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.way_point_cartesian_pose);
    s << indent << "end_point_is_joint_pose: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.end_point_is_joint_pose);
    s << indent << "end_point_joint_pose[]" << std::endl;
    for (size_t i = 0; i < v.end_point_joint_pose.size(); ++i)
    {
      s << indent << "  end_point_joint_pose[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.end_point_joint_pose[i]);
    }
    s << indent << "end_point_cartesian_pose: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.end_point_cartesian_pose);
    s << indent << "circle_angle: ";
    Printer<double>::stream(s, indent + "  ", v.circle_angle);
    s << indent << "common: ";
    s << std::endl;
    Printer< ::lebai_msgs::MoveCommon_<ContainerAllocator> >::stream(s, indent + "  ", v.common);
    s << indent << "execute_mode: ";
    s << std::endl;
    Printer< ::lebai_msgs::ExecuteMode_<ContainerAllocator> >::stream(s, indent + "  ", v.execute_mode);
  }
};

} // namespace message_operations
} // namespace ros

#endif // LEBAI_MSGS_MESSAGE_MOVECIRCLEREQUEST_H
