# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lebai_msgs/MoveCircleRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import lebai_msgs.msg

class MoveCircleRequest(genpy.Message):
  _md5sum = "26e0f80d402217d95277f55cf77dc8cb"
  _type = "lebai_msgs/MoveCircleRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool way_point_is_joint_pose
float64[] way_point_joint_pose
geometry_msgs/Pose way_point_cartesian_pose
bool end_point_is_joint_pose
float64[] end_point_joint_pose
geometry_msgs/Pose end_point_cartesian_pose
float64 circle_angle
lebai_msgs/MoveCommon common
lebai_msgs/ExecuteMode execute_mode

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: lebai_msgs/MoveCommon
float64 vel
float64 acc
float64 time
bool is_continous_mode
# 0: normal move, 1: smooth move
uint8 continuation_type
# until data
bool until
lebai_msgs/UntilInfo until_info
================================================================================
MSG: lebai_msgs/UntilInfo
uint8 io_express_logic
lebai_msgs/IOConditionalExpress[] io_express

uint8 LOGIC_AND=0
uint8 LOGIC_OR=1


================================================================================
MSG: lebai_msgs/IOConditionalExpress
uint32 group
uint32 pin
uint32 type
float64 float_value
uint8 uint_value
uint8 logic_operation

uint8 GROUP_ROBOT=0
uint8 GROUP_FLANGE=1

uint8 TYPE_ANALOG=0
uint8 TYPE_DIGITAL=1

# great >
uint8 LOGIC_OP_GT=0
# great and equal >=
uint8 LOGIC_OP_GE=1
# equal
uint8 LOGIC_OP_EQ=2
# not equal
uint8 LOGIC_OP_NE=3
# less than
uint8 LOGIC_OP_LT=4
# less than and equal
uint8 LOGIC_OP_LE=5




================================================================================
MSG: lebai_msgs/ExecuteMode
uint8 data
uint8 EXECUTE_MODE_BUFFER=0
uint8 EXECUTE_MODE_IMMED=1"""
  __slots__ = ['way_point_is_joint_pose','way_point_joint_pose','way_point_cartesian_pose','end_point_is_joint_pose','end_point_joint_pose','end_point_cartesian_pose','circle_angle','common','execute_mode']
  _slot_types = ['bool','float64[]','geometry_msgs/Pose','bool','float64[]','geometry_msgs/Pose','float64','lebai_msgs/MoveCommon','lebai_msgs/ExecuteMode']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       way_point_is_joint_pose,way_point_joint_pose,way_point_cartesian_pose,end_point_is_joint_pose,end_point_joint_pose,end_point_cartesian_pose,circle_angle,common,execute_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveCircleRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.way_point_is_joint_pose is None:
        self.way_point_is_joint_pose = False
      if self.way_point_joint_pose is None:
        self.way_point_joint_pose = []
      if self.way_point_cartesian_pose is None:
        self.way_point_cartesian_pose = geometry_msgs.msg.Pose()
      if self.end_point_is_joint_pose is None:
        self.end_point_is_joint_pose = False
      if self.end_point_joint_pose is None:
        self.end_point_joint_pose = []
      if self.end_point_cartesian_pose is None:
        self.end_point_cartesian_pose = geometry_msgs.msg.Pose()
      if self.circle_angle is None:
        self.circle_angle = 0.
      if self.common is None:
        self.common = lebai_msgs.msg.MoveCommon()
      if self.execute_mode is None:
        self.execute_mode = lebai_msgs.msg.ExecuteMode()
    else:
      self.way_point_is_joint_pose = False
      self.way_point_joint_pose = []
      self.way_point_cartesian_pose = geometry_msgs.msg.Pose()
      self.end_point_is_joint_pose = False
      self.end_point_joint_pose = []
      self.end_point_cartesian_pose = geometry_msgs.msg.Pose()
      self.circle_angle = 0.
      self.common = lebai_msgs.msg.MoveCommon()
      self.execute_mode = lebai_msgs.msg.ExecuteMode()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.way_point_is_joint_pose
      buff.write(_get_struct_B().pack(_x))
      length = len(self.way_point_joint_pose)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.way_point_joint_pose))
      _x = self
      buff.write(_get_struct_7dB().pack(_x.way_point_cartesian_pose.position.x, _x.way_point_cartesian_pose.position.y, _x.way_point_cartesian_pose.position.z, _x.way_point_cartesian_pose.orientation.x, _x.way_point_cartesian_pose.orientation.y, _x.way_point_cartesian_pose.orientation.z, _x.way_point_cartesian_pose.orientation.w, _x.end_point_is_joint_pose))
      length = len(self.end_point_joint_pose)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.end_point_joint_pose))
      _x = self
      buff.write(_get_struct_11d4B().pack(_x.end_point_cartesian_pose.position.x, _x.end_point_cartesian_pose.position.y, _x.end_point_cartesian_pose.position.z, _x.end_point_cartesian_pose.orientation.x, _x.end_point_cartesian_pose.orientation.y, _x.end_point_cartesian_pose.orientation.z, _x.end_point_cartesian_pose.orientation.w, _x.circle_angle, _x.common.vel, _x.common.acc, _x.common.time, _x.common.is_continous_mode, _x.common.continuation_type, _x.common.until, _x.common.until_info.io_express_logic))
      length = len(self.common.until_info.io_express)
      buff.write(_struct_I.pack(length))
      for val1 in self.common.until_info.io_express:
        _x = val1
        buff.write(_get_struct_3Id2B().pack(_x.group, _x.pin, _x.type, _x.float_value, _x.uint_value, _x.logic_operation))
      _x = self.execute_mode.data
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.way_point_cartesian_pose is None:
        self.way_point_cartesian_pose = geometry_msgs.msg.Pose()
      if self.end_point_cartesian_pose is None:
        self.end_point_cartesian_pose = geometry_msgs.msg.Pose()
      if self.common is None:
        self.common = lebai_msgs.msg.MoveCommon()
      if self.execute_mode is None:
        self.execute_mode = lebai_msgs.msg.ExecuteMode()
      end = 0
      start = end
      end += 1
      (self.way_point_is_joint_pose,) = _get_struct_B().unpack(str[start:end])
      self.way_point_is_joint_pose = bool(self.way_point_is_joint_pose)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.way_point_joint_pose = s.unpack(str[start:end])
      _x = self
      start = end
      end += 57
      (_x.way_point_cartesian_pose.position.x, _x.way_point_cartesian_pose.position.y, _x.way_point_cartesian_pose.position.z, _x.way_point_cartesian_pose.orientation.x, _x.way_point_cartesian_pose.orientation.y, _x.way_point_cartesian_pose.orientation.z, _x.way_point_cartesian_pose.orientation.w, _x.end_point_is_joint_pose,) = _get_struct_7dB().unpack(str[start:end])
      self.end_point_is_joint_pose = bool(self.end_point_is_joint_pose)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.end_point_joint_pose = s.unpack(str[start:end])
      _x = self
      start = end
      end += 92
      (_x.end_point_cartesian_pose.position.x, _x.end_point_cartesian_pose.position.y, _x.end_point_cartesian_pose.position.z, _x.end_point_cartesian_pose.orientation.x, _x.end_point_cartesian_pose.orientation.y, _x.end_point_cartesian_pose.orientation.z, _x.end_point_cartesian_pose.orientation.w, _x.circle_angle, _x.common.vel, _x.common.acc, _x.common.time, _x.common.is_continous_mode, _x.common.continuation_type, _x.common.until, _x.common.until_info.io_express_logic,) = _get_struct_11d4B().unpack(str[start:end])
      self.common.is_continous_mode = bool(self.common.is_continous_mode)
      self.common.until = bool(self.common.until)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.common.until_info.io_express = []
      for i in range(0, length):
        val1 = lebai_msgs.msg.IOConditionalExpress()
        _x = val1
        start = end
        end += 22
        (_x.group, _x.pin, _x.type, _x.float_value, _x.uint_value, _x.logic_operation,) = _get_struct_3Id2B().unpack(str[start:end])
        self.common.until_info.io_express.append(val1)
      start = end
      end += 1
      (self.execute_mode.data,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.way_point_is_joint_pose
      buff.write(_get_struct_B().pack(_x))
      length = len(self.way_point_joint_pose)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.way_point_joint_pose.tostring())
      _x = self
      buff.write(_get_struct_7dB().pack(_x.way_point_cartesian_pose.position.x, _x.way_point_cartesian_pose.position.y, _x.way_point_cartesian_pose.position.z, _x.way_point_cartesian_pose.orientation.x, _x.way_point_cartesian_pose.orientation.y, _x.way_point_cartesian_pose.orientation.z, _x.way_point_cartesian_pose.orientation.w, _x.end_point_is_joint_pose))
      length = len(self.end_point_joint_pose)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.end_point_joint_pose.tostring())
      _x = self
      buff.write(_get_struct_11d4B().pack(_x.end_point_cartesian_pose.position.x, _x.end_point_cartesian_pose.position.y, _x.end_point_cartesian_pose.position.z, _x.end_point_cartesian_pose.orientation.x, _x.end_point_cartesian_pose.orientation.y, _x.end_point_cartesian_pose.orientation.z, _x.end_point_cartesian_pose.orientation.w, _x.circle_angle, _x.common.vel, _x.common.acc, _x.common.time, _x.common.is_continous_mode, _x.common.continuation_type, _x.common.until, _x.common.until_info.io_express_logic))
      length = len(self.common.until_info.io_express)
      buff.write(_struct_I.pack(length))
      for val1 in self.common.until_info.io_express:
        _x = val1
        buff.write(_get_struct_3Id2B().pack(_x.group, _x.pin, _x.type, _x.float_value, _x.uint_value, _x.logic_operation))
      _x = self.execute_mode.data
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.way_point_cartesian_pose is None:
        self.way_point_cartesian_pose = geometry_msgs.msg.Pose()
      if self.end_point_cartesian_pose is None:
        self.end_point_cartesian_pose = geometry_msgs.msg.Pose()
      if self.common is None:
        self.common = lebai_msgs.msg.MoveCommon()
      if self.execute_mode is None:
        self.execute_mode = lebai_msgs.msg.ExecuteMode()
      end = 0
      start = end
      end += 1
      (self.way_point_is_joint_pose,) = _get_struct_B().unpack(str[start:end])
      self.way_point_is_joint_pose = bool(self.way_point_is_joint_pose)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.way_point_joint_pose = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 57
      (_x.way_point_cartesian_pose.position.x, _x.way_point_cartesian_pose.position.y, _x.way_point_cartesian_pose.position.z, _x.way_point_cartesian_pose.orientation.x, _x.way_point_cartesian_pose.orientation.y, _x.way_point_cartesian_pose.orientation.z, _x.way_point_cartesian_pose.orientation.w, _x.end_point_is_joint_pose,) = _get_struct_7dB().unpack(str[start:end])
      self.end_point_is_joint_pose = bool(self.end_point_is_joint_pose)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.end_point_joint_pose = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 92
      (_x.end_point_cartesian_pose.position.x, _x.end_point_cartesian_pose.position.y, _x.end_point_cartesian_pose.position.z, _x.end_point_cartesian_pose.orientation.x, _x.end_point_cartesian_pose.orientation.y, _x.end_point_cartesian_pose.orientation.z, _x.end_point_cartesian_pose.orientation.w, _x.circle_angle, _x.common.vel, _x.common.acc, _x.common.time, _x.common.is_continous_mode, _x.common.continuation_type, _x.common.until, _x.common.until_info.io_express_logic,) = _get_struct_11d4B().unpack(str[start:end])
      self.common.is_continous_mode = bool(self.common.is_continous_mode)
      self.common.until = bool(self.common.until)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.common.until_info.io_express = []
      for i in range(0, length):
        val1 = lebai_msgs.msg.IOConditionalExpress()
        _x = val1
        start = end
        end += 22
        (_x.group, _x.pin, _x.type, _x.float_value, _x.uint_value, _x.logic_operation,) = _get_struct_3Id2B().unpack(str[start:end])
        self.common.until_info.io_express.append(val1)
      start = end
      end += 1
      (self.execute_mode.data,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_11d4B = None
def _get_struct_11d4B():
    global _struct_11d4B
    if _struct_11d4B is None:
        _struct_11d4B = struct.Struct("<11d4B")
    return _struct_11d4B
_struct_3Id2B = None
def _get_struct_3Id2B():
    global _struct_3Id2B
    if _struct_3Id2B is None:
        _struct_3Id2B = struct.Struct("<3Id2B")
    return _struct_3Id2B
_struct_7dB = None
def _get_struct_7dB():
    global _struct_7dB
    if _struct_7dB is None:
        _struct_7dB = struct.Struct("<7dB")
    return _struct_7dB
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lebai_msgs/MoveCircleResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class MoveCircleResponse(genpy.Message):
  _md5sum = "e2cc9e9d8c464550830df49c160979ad"
  _type = "lebai_msgs/MoveCircleResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool ret
"""
  __slots__ = ['ret']
  _slot_types = ['bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       ret

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveCircleResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.ret is None:
        self.ret = False
    else:
      self.ret = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.ret
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.ret,) = _get_struct_B().unpack(str[start:end])
      self.ret = bool(self.ret)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.ret
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 1
      (self.ret,) = _get_struct_B().unpack(str[start:end])
      self.ret = bool(self.ret)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
class MoveCircle(object):
  _type          = 'lebai_msgs/MoveCircle'
  _md5sum = '76aefbda84057bd81221aca855230727'
  _request_class  = MoveCircleRequest
  _response_class = MoveCircleResponse
