# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lebai_msgs/SetAORequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import lebai_msgs.msg

class SetAORequest(genpy.Message):
  _md5sum = "0351e1f16076529abe80b1cda6c8fe59"
  _type = "lebai_msgs/SetAORequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """uint16 pin
float64 value
lebai_msgs/ExecuteMode execute_mode

================================================================================
MSG: lebai_msgs/ExecuteMode
uint8 data
uint8 EXECUTE_MODE_BUFFER=0
uint8 EXECUTE_MODE_IMMED=1"""
  __slots__ = ['pin','value','execute_mode']
  _slot_types = ['uint16','float64','lebai_msgs/ExecuteMode']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       pin,value,execute_mode

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetAORequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.pin is None:
        self.pin = 0
      if self.value is None:
        self.value = 0.
      if self.execute_mode is None:
        self.execute_mode = lebai_msgs.msg.ExecuteMode()
    else:
      self.pin = 0
      self.value = 0.
      self.execute_mode = lebai_msgs.msg.ExecuteMode()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_HdB().pack(_x.pin, _x.value, _x.execute_mode.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.execute_mode is None:
        self.execute_mode = lebai_msgs.msg.ExecuteMode()
      end = 0
      _x = self
      start = end
      end += 11
      (_x.pin, _x.value, _x.execute_mode.data,) = _get_struct_HdB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_HdB().pack(_x.pin, _x.value, _x.execute_mode.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.execute_mode is None:
        self.execute_mode = lebai_msgs.msg.ExecuteMode()
      end = 0
      _x = self
      start = end
      end += 11
      (_x.pin, _x.value, _x.execute_mode.data,) = _get_struct_HdB().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_HdB = None
def _get_struct_HdB():
    global _struct_HdB
    if _struct_HdB is None:
        _struct_HdB = struct.Struct("<HdB")
    return _struct_HdB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lebai_msgs/SetAOResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import industrial_msgs.msg

class SetAOResponse(genpy.Message):
  _md5sum = "50b1f38f75f5677e5692f3b3e7e1ea48"
  _type = "lebai_msgs/SetAOResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """industrial_msgs/ServiceReturnCode code

================================================================================
MSG: industrial_msgs/ServiceReturnCode
# Service return codes for simple requests.  All ROS-Industrial service
# replies are required to have a return code indicating success or failure
# Specific return codes for different failure should be negative.
int8 val

int8 SUCCESS = 1
int8 FAILURE = -1

"""
  __slots__ = ['code']
  _slot_types = ['industrial_msgs/ServiceReturnCode']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       code

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SetAOResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.code is None:
        self.code = industrial_msgs.msg.ServiceReturnCode()
    else:
      self.code = industrial_msgs.msg.ServiceReturnCode()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.code.val
      buff.write(_get_struct_b().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.code is None:
        self.code = industrial_msgs.msg.ServiceReturnCode()
      end = 0
      start = end
      end += 1
      (self.code.val,) = _get_struct_b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.code.val
      buff.write(_get_struct_b().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.code is None:
        self.code = industrial_msgs.msg.ServiceReturnCode()
      end = 0
      start = end
      end += 1
      (self.code.val,) = _get_struct_b().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b = None
def _get_struct_b():
    global _struct_b
    if _struct_b is None:
        _struct_b = struct.Struct("<b")
    return _struct_b
class SetAO(object):
  _type          = 'lebai_msgs/SetAO'
  _md5sum = '62f232c76f8ee745408ad371412c03b5'
  _request_class  = SetAORequest
  _response_class = SetAOResponse
