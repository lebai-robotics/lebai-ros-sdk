# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from lebai_msgs/IOStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class IOStatus(genpy.Message):
  _md5sum = "50c134754be339b506d0926e86b51aa1"
  _type = "lebai_msgs/IOStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool[] robot_din
bool[] robot_dout
float32[] robot_ain
float32[] robot_aout
uint8[] robot_ain_type
uint8[] robot_aout_type
bool[] flange_din
bool[] flange_dout

uint8 VOLTAGETYPE=0
uint8 CURRENTTYPE=1
"""
  # Pseudo-constants
  VOLTAGETYPE = 0
  CURRENTTYPE = 1

  __slots__ = ['robot_din','robot_dout','robot_ain','robot_aout','robot_ain_type','robot_aout_type','flange_din','flange_dout']
  _slot_types = ['bool[]','bool[]','float32[]','float32[]','uint8[]','uint8[]','bool[]','bool[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       robot_din,robot_dout,robot_ain,robot_aout,robot_ain_type,robot_aout_type,flange_din,flange_dout

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IOStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.robot_din is None:
        self.robot_din = []
      if self.robot_dout is None:
        self.robot_dout = []
      if self.robot_ain is None:
        self.robot_ain = []
      if self.robot_aout is None:
        self.robot_aout = []
      if self.robot_ain_type is None:
        self.robot_ain_type = b''
      if self.robot_aout_type is None:
        self.robot_aout_type = b''
      if self.flange_din is None:
        self.flange_din = []
      if self.flange_dout is None:
        self.flange_dout = []
    else:
      self.robot_din = []
      self.robot_dout = []
      self.robot_ain = []
      self.robot_aout = []
      self.robot_ain_type = b''
      self.robot_aout_type = b''
      self.flange_din = []
      self.flange_dout = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.robot_din)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.robot_din))
      length = len(self.robot_dout)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.robot_dout))
      length = len(self.robot_ain)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.robot_ain))
      length = len(self.robot_aout)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.robot_aout))
      _x = self.robot_ain_type
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.robot_aout_type
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.flange_din)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.flange_din))
      length = len(self.flange_dout)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.flange_dout))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.robot_din = s.unpack(str[start:end])
      self.robot_din = list(map(bool, self.robot_din))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.robot_dout = s.unpack(str[start:end])
      self.robot_dout = list(map(bool, self.robot_dout))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.robot_ain = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.robot_aout = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.robot_ain_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.robot_aout_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.flange_din = s.unpack(str[start:end])
      self.flange_din = list(map(bool, self.flange_din))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.flange_dout = s.unpack(str[start:end])
      self.flange_dout = list(map(bool, self.flange_dout))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.robot_din)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.robot_din.tostring())
      length = len(self.robot_dout)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.robot_dout.tostring())
      length = len(self.robot_ain)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.robot_ain.tostring())
      length = len(self.robot_aout)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.robot_aout.tostring())
      _x = self.robot_ain_type
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.robot_aout_type
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.flange_din)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.flange_din.tostring())
      length = len(self.flange_dout)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.flange_dout.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.robot_din = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.robot_din = list(map(bool, self.robot_din))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.robot_dout = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.robot_dout = list(map(bool, self.robot_dout))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.robot_ain = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.robot_aout = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.robot_ain_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.robot_aout_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.flange_din = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.flange_din = list(map(bool, self.flange_din))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.flange_dout = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.flange_dout = list(map(bool, self.flange_dout))
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
